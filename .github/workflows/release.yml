name: Release

on:
  workflow_call:

jobs:
  build_android:
    uses: ./.github/workflows/build-android.yml
    secrets: inherit

  build_linux:
    uses: ./.github/workflows/build-linux.yml
    secrets: inherit

  build_linux_musl:
    uses: ./.github/workflows/build-linux-musl.yml
    secrets: inherit

  build_macos:
    uses: ./.github/workflows/build-macos.yml
    secrets: inherit

  build_windows:
    uses: ./.github/workflows/build-windows.yml
    secrets: inherit

  release_github:
    name: Release Github
    runs-on: ubuntu-latest
    needs: [build_android, build_linux, build_linux_musl, build_macos, build_windows]

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/util/initialize
        with: {github-token: "${{ github.token }}"}

      - name: Deploy
        run: dart run grinder pkg-github-release
        env:
          GH_TOKEN: "${{ secrets.GH_TOKEN }}"
          GH_USER: sassbot

  deploy_github:
    name: Deploy Github
    runs-on: ubuntu-latest
    needs: [release_github]

    permissions:
      contents: write

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build-*/*

  deploy_npm:
    name: Deploy npm
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/util/initialize
        with: {github-token: "${{ github.token }}"}

      - name: Deploy
        run: dart run grinder pkg-npm-deploy
        env:
          NPM_TOKEN: "${{ secrets.NPM_TOKEN }}"

  deploy_bazel:
    name: Deploy Bazel
    runs-on: ubuntu-latest
    needs: [deploy_npm]

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/util/initialize
        with: {github-token: "${{ github.token }}"}

      - name: Deploy
        run: dart run grinder update-bazel
        env:
          GH_TOKEN: "${{ secrets.GH_TOKEN }}"
          GH_USER: sassbot

  deploy_pub:
    name: Deploy Pub
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/util/initialize
        with: {github-token: "${{ github.token }}"}

      - name: Deploy
        run: dart run grinder protobuf pkg-pub-deploy
        env: {PUB_CREDENTIALS: "${{ secrets.PUB_CREDENTIALS }}"}

  deploy_sub_packages:
    name: Deploy Sub-Packages
    runs-on: ubuntu-latest
    needs: [deploy_pub]

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/util/initialize
        with: {github-token: "${{ github.token }}"}

      - name: Deploy
        run: dart run grinder deploy-sub-packages
        env:
          PUB_CREDENTIALS: "${{ secrets.PUB_CREDENTIALS }}"
          GH_TOKEN: "${{ secrets.GH_TOKEN }}"
          GH_USER: sassbot

  deploy_homebrew:
    name: Deploy Homebrew
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: dart-lang/setup-dart@v1
      - run: dart pub get

      - name: Deploy
        run: dart run grinder pkg-homebrew-update
        env:
          GH_TOKEN: "${{ secrets.GH_TOKEN }}"
          GH_USER: sassbot

  deploy_chocolatey:
    name: Deploy Chocolatey
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/util/initialize
        with: {github-token: "${{ github.token }}"}

      - name: Deploy
        run: dart run grinder pkg-chocolatey-deploy
        env: {CHOCOLATEY_TOKEN: "${{ secrets.CHOCOLATEY_TOKEN }}"}

  deploy_website:
    name: Deploy sass-lang.com
    runs-on: ubuntu-latest
    needs: [deploy_npm]

    steps:
      - uses: actions/checkout@v4
        with:
          repository: sass/sass-site
          token: ${{ secrets.SASS_SITE_TOKEN }}

      - name: Get version
        id: version
        run: echo "version=${GITHUB_REF##*/}" | tee --append "$GITHUB_OUTPUT"

      - name: Wait for npm registry's CDN to catch up on replications
        run: sleep 600

      - name: Update Dart Sass version
        run: npm install sass@${{ steps.version.outputs.version }}

      - uses: EndBug/add-and-commit@v9
        with:
          author_name: Sass Bot
          author_email: sass.bot.beep.boop@gmail.com
          message: Cut a release for a new Dart Sass version
          commit: --allow-empty

  release_embedded_host:
    name: Release Embedded Host
    runs-on: ubuntu-latest
    needs: [deploy_github]

    steps:
      - uses: actions/checkout@v4
        with:
          repository: sass/embedded-host-node
          token: ${{ secrets.GH_TOKEN }}

      - name: Get version
        id: version
        run: |
          echo "version=${GITHUB_REF##*/}" | tee --append "$GITHUB_OUTPUT"
          echo "protocol_version=$(curl -fsSL -H "Authorization: Bearer ${{ github.token }}" https://raw.githubusercontent.com/sass/sass/HEAD/spec/EMBEDDED_PROTOCOL_VERSION)" | tee --append "$GITHUB_OUTPUT"

      - name: Update version
        run: |
          # Update binary package versions
          for dir in $(ls npm); do
            cat "npm/$dir/package.json" |
                jq --arg version ${{ steps.version.outputs.version }} '
                  .version |= $version
                ' > package.json.tmp &&
              mv package.json.tmp "npm/$dir/package.json"
          done

          # Update main package version and dependencies on binary packages
          cat package.json |
              jq --arg version ${{ steps.version.outputs.version }} --arg protocol_version ${{ steps.version.outputs.protocol_version }} '
                .version |= $version |
                ."compiler-version" |= $version |
                ."protocol-version" |= $protocol_version |
                .optionalDependencies = (.optionalDependencies | .[] |= $version)
              ' > package.json.tmp &&
            mv package.json.tmp package.json
          curl -fsSL -H "Authorization: Bearer ${{ github.token }}" https://raw.githubusercontent.com/sass/dart-sass/${{ steps.version.outputs.version }}/CHANGELOG.md > CHANGELOG.md
        shell: bash

      - uses: EndBug/add-and-commit@v9
        with:
          author_name: Sass Bot
          author_email: sass.bot.beep.boop@gmail.com
          message: Update Dart Sass version and release
          tag: ${{ steps.version.outputs.version }}

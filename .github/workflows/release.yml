name: Release

on:
  workflow_call:

jobs:
  build_linux:
    permissions:
      attestations: write
      id-token: write
    uses: ./.github/workflows/build-linux.yml
    secrets: inherit

  build_macos:
    permissions:
      attestations: write
      id-token: write
    uses: ./.github/workflows/build-macos.yml
    secrets: inherit

  build_windows:
    permissions:
      attestations: write
      id-token: write
    uses: ./.github/workflows/build-windows.yml
    secrets: inherit

  release_github:
    name: Release Github
    runs-on: ubuntu-latest
    needs: [build_linux, build_macos, build_windows]

    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/util/initialize
        with: {github-token: "${{ github.token }}"}

      - name: Deploy
        run: dart run grinder pkg-github-release
        env:
          GH_TOKEN: "${{ secrets.GH_TOKEN }}"
          GH_USER: sassbot

  deploy_github:
    name: Deploy Github
    runs-on: ubuntu-latest
    needs: [release_github]

    permissions:
      contents: write

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v5

      - name: Release
        run: gh release upload ${{ github.ref_name }} build-*/* --repo ${{ github.repository }}
        env:
          GH_TOKEN: ${{ github.token }}

  deploy_npm:
    name: Deploy npm
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/util/initialize
        with: {github-token: "${{ github.token }}"}

      - name: Deploy
        run: dart run grinder pkg-npm-deploy
        env:
          UPDATE_SASS_SASS_REPO: false
          NPM_TOKEN: "${{ secrets.NPM_TOKEN }}"

  deploy_pub:
    name: Deploy Pub
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5
        with:
          # We have to use this rather than the implicit GitHub token so that
          # pushing a new tag triggers another action.
          token: ${{ secrets.GH_TOKEN }}
      - uses: ./.github/util/initialize
        with: {github-token: "${{ github.token }}"}

      - name: Deploy
        run: dart run grinder protobuf pkg-pub-deploy
        env: {PUB_CREDENTIALS: "${{ secrets.PUB_CREDENTIALS }}"}

      - name: Get Sass API version
        id: sass-api-version
        run: |
          echo "version=$(cat pkg/sass_api/pubspec.yaml | sed -nE 's/version: (.*)/\1/p')" | tee --append "$GITHUB_OUTPUT"
      # This should be /-separated rather than hyphenated, but pub.dev doesn't
      # currently allow that (dart-lang/pub-dev#8690).
      - run: git tag sass-api-${{ steps.sass-api-version.outputs.version }}
      - run: git push --tag

  deploy_sass_parser:
    name: Deploy sass-parser
    runs-on: ubuntu-latest
    needs: [deploy_npm]

    steps:
      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.GH_TOKEN }}
      # Set up .npmrc file to publish to npm
      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          check-latest: true
          registry-url: 'https://registry.npmjs.org'

        # The repo package has a file dependency, but the released version needs
        # a real dependency on the released version of Sass.
      - name: Get Dart Sass version
        id: dart-sass-version
        run: echo "version=${{ github.ref_name }}" | tee --append "$GITHUB_OUTPUT"
      - run: npm install sass@${{ steps.dart-sass-version.outputs.version }}
        working-directory: pkg/sass-parser/

      - run: npm run compile
        working-directory: pkg/sass-parser/
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: '${{ secrets.NPM_TOKEN }}'
        working-directory: pkg/sass-parser/

      - name: Get Sass parser version
        id: sass-parser-version
        run: |
          echo "version=$(jq .version pkg/sass-parser/package.json)" | tee --append "$GITHUB_OUTPUT"
      - run: git tag sass-parser/${{ steps.sass-parser-version.outputs.version }}
      - run: git push --tag

  deploy_homebrew:
    name: Deploy Homebrew
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5
      - uses: dart-lang/setup-dart@v1
      - run: dart pub get

      - name: Deploy
        run: dart run grinder pkg-homebrew-update
        env:
          GH_TOKEN: "${{ secrets.GH_TOKEN }}"
          GH_USER: sassbot

  deploy_chocolatey:
    name: Deploy Chocolatey
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v5
      - uses: ./.github/util/initialize
        with: {github-token: "${{ github.token }}"}

      - name: Deploy
        run: dart run grinder pkg-chocolatey-deploy
        env: {CHOCOLATEY_TOKEN: "${{ secrets.CHOCOLATEY_TOKEN }}"}

  deploy_website:
    name: Deploy sass-lang.com
    runs-on: ubuntu-latest
    needs: [deploy_npm]

    steps:
      - uses: actions/checkout@v5
        with:
          repository: sass/sass-site
          token: ${{ secrets.SASS_SITE_TOKEN }}

      - name: Get version
        id: version
        run: echo "version=${{ github.ref_name }}" | tee --append "$GITHUB_OUTPUT"

      - name: Wait for npm registry's CDN to catch up on replications
        run: sleep 600

      - name: Update Dart Sass version
        run: npm install sass@${{ steps.version.outputs.version }}

      - uses: EndBug/add-and-commit@v9
        with:
          author_name: Sass Bot
          author_email: sass.bot.beep.boop@gmail.com
          message: Cut a release for a new Dart Sass version
          commit: --allow-empty

  release_embedded_host:
    name: Release Embedded Host
    runs-on: ubuntu-latest
    needs: [deploy_github]

    steps:
      - uses: actions/checkout@v5
        with:
          repository: sass/embedded-host-node
          token: ${{ secrets.GH_TOKEN }}

      - name: Get version
        id: version
        run: |
          echo "version=${{ github.ref_name }}" | tee --append "$GITHUB_OUTPUT"
          echo "protocol_version=$(curl -fsSL -H "Authorization: Bearer ${{ github.token }}" https://raw.githubusercontent.com/sass/sass/HEAD/spec/EMBEDDED_PROTOCOL_VERSION)" | tee --append "$GITHUB_OUTPUT"

      - name: Update version
        run: |
          # Update binary package versions
          for dir in $(ls npm); do
            cat "npm/$dir/package.json" |
                jq --arg version ${{ steps.version.outputs.version }} '
                  .version |= $version |
                  if (.dependencies.sass) then .dependencies.sass |= $version end
                ' > package.json.tmp &&
              mv package.json.tmp "npm/$dir/package.json"
          done

          # Update main package version and dependencies on binary packages
          cat package.json |
              jq --arg version ${{ steps.version.outputs.version }} --arg protocol_version ${{ steps.version.outputs.protocol_version }} '
                .version |= $version |
                ."compiler-version" |= $version |
                ."protocol-version" |= $protocol_version |
                .optionalDependencies = (.optionalDependencies | .[] |= $version)
              ' > package.json.tmp &&
            mv package.json.tmp package.json
          curl -fsSL -H "Authorization: Bearer ${{ github.token }}" https://raw.githubusercontent.com/sass/dart-sass/${{ steps.version.outputs.version }}/CHANGELOG.md > CHANGELOG.md
        shell: bash

      - uses: EndBug/add-and-commit@v9
        with:
          author_name: Sass Bot
          author_email: sass.bot.beep.boop@gmail.com
          message: Update Dart Sass version and release
          tag: ${{ steps.version.outputs.version }}

// Copyright 2024 Google LLC. Use of this source code is governed by an
// MIT-style license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

// CHECKSUM

import 'package:cli_pkg/js.dart';
import 'package:collection/collection.dart';
import 'package:pub_semver/pub_semver.dart';

import 'util/nullable.dart';

/// A deprecated feature in the language.
enum Deprecation {
  // REPLACE WITH AUTOGENERATED LIST

  /// Used for deprecations coming from user-authored code.
  userAuthored('user-authored', deprecatedIn: null),

  @Deprecated('This deprecation name was never actually used.')
  calcInterp('calc-interp', deprecatedIn: null);

  @Deprecated('Use duplicateVarFlags instead.')
  static const duplicateVariableFlags = duplicateVarFlags;


  /// A unique ID for this deprecation in kebab case.
  ///
  /// This is used to refer to the deprecation on the command line.
  final String id;

  /// Underlying version string used by [deprecatedIn].
  ///
  /// This is necessary because [Version] doesn't have a constant constructor,
  /// so we can't use it directly as an enum property.
  final String? _deprecatedIn;

  /// The Dart Sass version this feature was first deprecated in.
  ///
  /// For deprecations that have existed in all versions of Dart Sass, this
  /// should be 0.0.0. For deprecations not related to a specific Sass version,
  /// this should be null.
  Version? get deprecatedIn => _deprecatedIn.andThen(Version.parse);

  /// A description of this deprecation that will be displayed in the CLI usage.
  ///
  /// If this is null, the given deprecation will not be listed.
  final String? description;

  /// Whether this deprecation will occur in the future.
  ///
  /// If this is true, `deprecatedIn` will be null, since we do not yet know
  /// what version of Dart Sass this deprecation will be live in.
  final bool isFuture;

  /// Underlying version string used by [obsoleteIn].
  ///
  /// This is necessary because [Version] doesn't have a constant constructor,
  /// so we can't use it directly as an enum property.
  final String? _obsoleteIn;

  /// The Dart Sass version this feature was fully removed in, making the
  /// deprecation obsolete.
  ///
  /// For deprecations that are not yet obsolete, this should be null.
  Version? get obsoleteIn => _obsoleteIn?.andThen(Version.parse);

  /// Constructs a regular deprecation.
  const Deprecation(this.id, {required String? deprecatedIn, this.description})
      : _deprecatedIn = deprecatedIn,
        _obsoleteIn = null,
        isFuture = false;

  /// Constructs a future deprecation.
  const Deprecation.future(this.id, {this.description})
      : _deprecatedIn = null,
        _obsoleteIn = null,
        isFuture = true;

  @override
  String toString() => id;

  /// Returns the deprecation with a given ID, or null if none exists.
  static Deprecation? fromId(String id) => Deprecation.values
      .firstWhereOrNull((deprecation) => deprecation.id == id);

  /// Returns the set of all deprecations done in or before [version].
  static Set<Deprecation> forVersion(Version version) {
    var range = VersionRange(max: version, includeMax: true);
    return {
      for (var deprecation in Deprecation.values)
        if (deprecation.deprecatedIn.andThen(range.allows) ?? false) deprecation
    };
  }
}
